//颠倒给定的 32 位无符号整数的二进制位。 
//
// 
//
// 示例 1： 
//
// 输入: 00000010100101000001111010011100
//输出: 00111001011110000010100101000000
//解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 输入：11111111111111111111111111111101
//输出：10111111111111111111111111111111
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -10737418
//25。 
// 
//
// 
//
// 进阶: 
//如果多次调用这个函数，你将如何优化你的算法？ 
// Related Topics 位运算 
// 👍 214 👎 0


package leetcode.editor.cn;
//Java：颠倒二进制位
public class P190ReverseBits{    
    public static void main(String[] args) {      
        Solution solution = new P190ReverseBits().new Solution();       
        // TO TEST
        int n = 43261596;
        solution.reverseBits(n);
    }
    //leetcode submit region begin(Prohibit modification and deletion)

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        // 1n 为                  0000 0010 1001 0100 0001 1110 1001 1100
        // 前16位 与 后16位 交换    0001 1110 1001 1100 0000 0010 1001 0100
        n = (n << 16) | (n >>> 16);
        // 以8个数为一个单位, 以低位为始, 与相邻高位进行交换
        //                       1001 1100 0001 1110 1001 0100 0000 0010
        n = (n & 0x00ff00ff) << 8 | (n & 0xff00ff00) >>> 8;
        // 每4位进行交换           1100 1001 1110 0001 0100 1001 0010 0000
        n = (n & 0x0f0f0f0f) << 4 | (n & 0xf0f0f0f0) >>> 4;
        // 每2位进行交换           0011 0110 1011 0100 0001 0110 1000 0000
        n = (n & 0x33333333) << 2 | (n & 0xcccccccc) >>> 2;
        // 每1位进行交换           0011 1001 0111 1000 0010 1001 0100 0000
        n = (n & 0x55555555) << 1 | (n & 0xaaaaaaaa) >>> 1;
        return n;
    }
}
// 1. 位运算
//public class Solution {
//    // you need treat n as an unsigned value
//    public int reverseBits(int n) {
//        int result = 0;
//        for (int i = 0; i < 32; i++) {
//            result <<= 1;
//            if ((n&1)==1) {
//                result += 1;
//            }
//            n = n >> 1;
//        }
//        return result;
//    }
//}
//leetcode submit region end(Prohibit modification and deletion)
/**
 * 00000010100101000001111010011100
 * 00111001011110000010100101000000
 *
 * 1. 先将 n 与 1 进行并运算,
 *        00000010100101000001111010011100
 *      & 00000000000000000000000000000000
 *      ----------------------------------
 *        00000000000000000000000000000000
 *     当最后一位为 1 时,返回 1
 *     则 result + 1;
 *     每循环一次, result 右移一位, n 左移一位
 *
 *      解答成功:
 * 			执行耗时:1 ms,击败了100.00% 的Java用户
 * 			内存消耗:38.9 MB,击败了5.44% 的Java用户
 * 	2. 交换
 * 	    16 位交换
 * 	    每8位交换
 * 	    ....
 * 	    直到 每 1 位交换
 *      需要注意的是: Java 进行左移时需要进行无符号左移
 *
 *      解答成功:
 * 			执行耗时:1 ms,击败了100.00% 的Java用户
 * 			内存消耗:39 MB,击败了5.44% 的Java用户
 */
}